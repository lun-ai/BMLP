% THIS FILE IS AUTOMATICALLY GENERATED.
% DO NOT EDIT; ALL CHANGES WILL BE LOST!

:- mode abstract_form(?,?,?).
:- mode abstract_form_all(?,?,?).
:- mode add_name_segment(+,?,?).
:- mode 'arg unification'(?,?,?,?).
:- mode 'change vars in arg'(?,?).
:- mode 'change vars in args'(?,?).
:- mode 'change vars in body'(?,?).
:- mode chb(?,?).
:- mode check_for_cut(?,?).
:- mode close_pi_calls(?,?).
:- mode 'collect from pred'(?,?).
:- mode 'collect pi calls'(?,?).
:- mode collect_pi_calls(?,?,?).
:- mode consecutive(?,?,?).
:- mode consecutive(?,?,?,?).
:- mode discrimination(?,?).
:- mode disjoint(?,?).
:- mode extract_arg_string(?,+,?).
:- mode extract_modifier_string(?,+,?).
:- mode filter_goal(?,?).
:- mode 'find all delete'(?,?,?,?).
:- mode 'find msg of calls'(?,?,?).
:- mode find_msg(?,?,?).
:- mode find_selected_clauses(?,?,?).
:- mode gen_name_modifier(?,?).
:- mode 'generate table decl'(?,?,?).
:- mode generate_table_decl(?,?).
:- mode 'give a second chance'(?,?).
:- mode 'index euristic'(?,?,+,?).
:- mode 'index euristic'(+,+,+,?).
:- mode index_euristic(?,?).
:- mode initialise.
:- mode 'interesting calls'(?,?,?).
:- mode interesting_calls(?,?,?).
:- mode interesting_indeed(?,?,?).
:- mode make_arg_vars_unique(?,+,?).
:- mode make_new_arg(?,?,?,?).
:- mode make_new_args(?,?,?,?).
:- mode make_special_call(?,?,?,?).
:- mode make_special_calls(?,?,?,?).
:- mode make_special_clauses(?,?,?,?).
:- mode make_special_pred(?,?,?,?).
:- mode 'merge calls'(?,?,?).
:- mode merge_calls(?,?).
:- mode msg(?,?,?).
:- mode msg_arg(?,?,?).
:- mode msg_copy(?,?,?,?,+,?).
:- mode 'name arg vars uniquely'(?,+,?).
:- mode 'name vars uniquely'(?,+,?).
:- mode name_vars_uniquely(?,?,?).
:- mode needs_new_body(?,?,?,?,?,?).
:- mode 'new clause list'(?,?,?,?,?).
:- mode new_clause_list(?,?,?).
:- mode 'non overlapping selection'(?,?).
:- mode non_overlapping_selection(?).
:- mode occurs_in(?,?,?,?).
:- mode proper_subset(?,?).
:- mode represent(?,+,+,+,+,?,?,?).
:- mode 'search for call'(?,?).
:- mode shift_left(?,?).
:- mode singleton_sets_opt(?,+,?,?).
:- mode singleton_special_call(?,?,?,?).
:- mode singleton_special_calls(?,?,?,?).
:- mode spec(?,?).
:- mode specialise(?,?,?,?).
:- mode 'specialise pred'(?,+,+,+,?,?,?).
:- mode specialise_calls(?,?,?,+,+,+,?,?,?,?).
:- mode specialise_calls(?,?,?,+,+,+,?,?,+,?).
:- mode specialise_calls(?,?,?,+,+,+,?,+,+,?).
:- mode specialise_calls(?,?,+,+,+,+,?,+,+,?).
:- mode specialise_calls(?,+,+,+,+,+,?,+,+,?).
:- mode specialise_pred(?,?,?,?,?,?).
:- mode sth_bound(?).
:- mode subst_calls(?,?,?,?,?).
:- mode subst_rep(?,?,?,?).
:- mode substitute(?,?,+,?,?,+,+,?).
:- mode substitute(?,?,?,?,?,?,?,?).
:- mode substitute(?,?,?,?,?,?,+,?).
:- mode substitute(?,?,?,?,?,+,+,?).
:- mode umnl_chk(?,?).
:- mode unifies_mnl(?,?).
:- mode 'well, add some more'(?,?).

:- mode_on_success abstract_form(A,B,C).
:- mode_on_success abstract_form_all(A,B,C).
:- mode_on_success add_name_segment(g,g,g).
:- mode_on_success 'arg unification'(A,ng,ng,B).
:- mode_on_success 'arg unification'(A,B,C,C).
:- mode_on_success 'arg unification'(ng,g,ng,A).
:- mode_on_success 'change vars in arg'(A,A).
:- mode_on_success 'change vars in args'(A,A).
:- mode_on_success 'change vars in body'(A,A).
:- mode_on_success chb(A,B).
:- mode_on_success check_for_cut(A,B).
:- mode_on_success close_pi_calls(A,A).
:- mode_on_success close_pi_calls(ng,A).
:- mode_on_success 'collect from pred'(A,B).
:- mode_on_success 'collect pi calls'(A,B).
:- mode_on_success collect_pi_calls(A,B,C).
:- mode_on_success consecutive(A,B,ng).
:- mode_on_success consecutive(A,B,B).
:- mode_on_success consecutive(A,g,B,A).
:- mode_on_success consecutive(ng,A,B,C).
:- mode_on_success discrimination(A,B).
:- mode_on_success disjoint(A,B).
:- mode_on_success extract_arg_string(A,g,g).
:- mode_on_success extract_modifier_string(A,g,g).
:- mode_on_success filter_goal(A,B).
:- mode_on_success 'find all delete'(A,B,A,g).
:- mode_on_success 'find all delete'(ng,A,B,ng).
:- mode_on_success 'find all delete'(ng,ng,g,g).
:- mode_on_success 'find msg of calls'(A,B,C).
:- mode_on_success find_msg(A,B,C).
:- mode_on_success find_selected_clauses(A,B,g).
:- mode_on_success find_selected_clauses(A,ng,ng).
:- mode_on_success gen_name_modifier(A,g).
:- mode_on_success 'generate table decl'(A,B,C).
:- mode_on_success generate_table_decl(A,B).
:- mode_on_success 'give a second chance'(A,B).
:- mode_on_success 'index euristic'(A,ng,g,g).
:- mode_on_success 'index euristic'(g,g,g,g).
:- mode_on_success index_euristic(A,g).
:- mode_on_success initialise.
:- mode_on_success 'interesting calls'(g,A,g).
:- mode_on_success 'interesting calls'(g,ng,ng).
:- mode_on_success 'interesting calls'(ng,A,B).
:- mode_on_success interesting_calls(A,ng,ng).
:- mode_on_success interesting_calls(A,ng,A).
:- mode_on_success interesting_calls(A,B,g).
:- mode_on_success interesting_calls(ng,A,ng).
:- mode_on_success interesting_calls(ng,ng,A).
:- mode_on_success interesting_indeed(A,ng,ng).
:- mode_on_success interesting_indeed(g,A,g).
:- mode_on_success interesting_indeed(ng,g,ng).
:- mode_on_success make_arg_vars_unique(A,g,A).
:- mode_on_success make_new_arg(g,A,B,B).
:- mode_on_success make_new_arg(ng,A,ng,B).
:- mode_on_success make_new_arg(ng,ng,A,A).
:- mode_on_success make_new_args(g,A,B,B).
:- mode_on_success make_new_args(ng,A,ng,B).
:- mode_on_success make_new_args(ng,ng,A,A).
:- mode_on_success make_special_call(A,B,ng,ng).
:- mode_on_success make_special_call(g,A,g,g).
:- mode_on_success make_special_call(ng,g,g,ng).
:- mode_on_success make_special_call(ng,ng,g,A).
:- mode_on_success make_special_calls(A,B,ng,ng).
:- mode_on_success make_special_calls(g,A,B,g).
:- mode_on_success make_special_calls(ng,g,g,ng).
:- mode_on_success make_special_calls(ng,ng,g,A).
:- mode_on_success make_special_clauses(g,A,g,g).
:- mode_on_success make_special_clauses(ng,A,ng,B).
:- mode_on_success make_special_clauses(ng,ng,g,g).
:- mode_on_success make_special_pred(A,B,ng,ng).
:- mode_on_success make_special_pred(g,A,g,B).
:- mode_on_success make_special_pred(ng,g,g,ng).
:- mode_on_success make_special_pred(ng,ng,g,A).
:- mode_on_success 'merge calls'(A,B,ng).
:- mode_on_success 'merge calls'(g,g,g).
:- mode_on_success merge_calls(A,ng).
:- mode_on_success merge_calls(A,A).
:- mode_on_success msg(A,B,C).
:- mode_on_success msg_arg(A,B,C).
:- mode_on_success msg_copy(A,g,B,B,g,g).
:- mode_on_success msg_copy(ng,ng,A,A,g,g).
:- mode_on_success 'name arg vars uniquely'(A,g,A).
:- mode_on_success 'name vars uniquely'(A,g,A).
:- mode_on_success name_vars_uniquely(A,B,A).
:- mode_on_success needs_new_body(A,B,C,D,A,E).
:- mode_on_success needs_new_body(A,g,B,ng,ng,g).
:- mode_on_success needs_new_body(ng,g,ng,A,B,g).
:- mode_on_success needs_new_body(ng,ng,A,B,C,g).
:- mode_on_success 'new clause list'(A,B,C,D,D).
:- mode_on_success 'new clause list'(g,g,g,ng,g).
:- mode_on_success 'new clause list'(g,ng,A,ng,g).
:- mode_on_success 'new clause list'(ng,A,B,ng,g).
:- mode_on_success 'new clause list'(ng,g,A,g,ng).
:- mode_on_success new_clause_list(A,B,B).
:- mode_on_success new_clause_list(A,ng,B).
:- mode_on_success new_clause_list(ng,g,ng).
:- mode_on_success 'non overlapping selection'(g,A).
:- mode_on_success 'non overlapping selection'(ng,A).
:- mode_on_success non_overlapping_selection(A).
:- mode_on_success occurs_in(g,A,B,g).
:- mode_on_success occurs_in(g,A,ng,ng).
:- mode_on_success occurs_in(ng,ng,A,g).
:- mode_on_success occurs_in(ng,ng,ng,ng).
:- mode_on_success proper_subset(A,B).
:- mode_on_success represent(A,g,g,g,g,ng,ng,ng).
:- mode_on_success represent(A,g,g,g,g,B,g,C).
:- mode_on_success 'search for call'(A,B).
:- mode_on_success shift_left(A,g).
:- mode_on_success shift_left(ng,ng).
:- mode_on_success singleton_sets_opt(A,g,A,g).
:- mode_on_success singleton_sets_opt(ng,g,A,B).
:- mode_on_success singleton_special_call(A,B,C,C).
:- mode_on_success singleton_special_call(g,ng,A,ng).
:- mode_on_success singleton_special_call(ng,A,B,ng).
:- mode_on_success singleton_special_calls(A,B,C,A).
:- mode_on_success singleton_special_calls(g,A,ng,ng).
:- mode_on_success singleton_special_calls(g,ng,A,ng).
:- mode_on_success singleton_special_calls(ng,A,g,g).
:- mode_on_success spec(A,ng).
:- mode_on_success spec(A,A).
:- mode_on_success spec(ng,A).
:- mode_on_success specialise(A,B,C,C).
:- mode_on_success specialise(A,B,ng,C).
:- mode_on_success 'specialise pred'(A,g,g,g,B,ng,C).
:- mode_on_success 'specialise pred'(A,g,g,g,B,C,C).
:- mode_on_success specialise_calls(A,B,ng,g,g,g,C,ng,D,E).
:- mode_on_success specialise_calls(A,B,C,g,g,g,D,g,ng,E).
:- mode_on_success specialise_calls(A,B,ng,g,g,g,C,g,g,D).
:- mode_on_success specialise_calls(A,ng,g,g,g,g,B,ng,C,D).
:- mode_on_success specialise_calls(A,ng,g,g,g,g,B,g,g,C).
:- mode_on_success specialise_calls(A,g,g,g,g,g,ng,ng,ng,ng).
:- mode_on_success specialise_calls(A,g,g,g,g,g,B,g,g,C).
:- mode_on_success specialise_pred(A,B,g,C,ng,D).
:- mode_on_success specialise_pred(A,B,g,C,D,D).
:- mode_on_success sth_bound(A).
:- mode_on_success subst_calls(A,B,C,D,A).
:- mode_on_success subst_calls(g,g,A,ng,ng).
:- mode_on_success subst_calls(ng,g,ng,A,g).
:- mode_on_success subst_calls(ng,ng,A,B,g).
:- mode_on_success subst_rep(A,B,ng,ng).
:- mode_on_success subst_rep(A,B,g,A).
:- mode_on_success subst_rep(ng,A,g,B).
:- mode_on_success substitute(A,B,C,D,E,F,ng,A).
:- mode_on_success substitute(A,B,C,D,E,ng,g,A).
:- mode_on_success substitute(A,B,C,D,E,g,g,A).
:- mode_on_success substitute(g,g,A,g,B,C,ng,ng).
:- mode_on_success substitute(g,g,A,B,C,ng,D,ng).
:- mode_on_success substitute(ng,g,A,g,B,ng,g,g).
:- mode_on_success substitute(ng,g,g,g,A,g,g,g).
:- mode_on_success substitute(ng,g,ng,A,B,C,D,g).
:- mode_on_success substitute(ng,ng,A,B,C,D,ng,g).
:- mode_on_success substitute(ng,ng,A,B,C,ng,g,g).
:- mode_on_success substitute(ng,ng,A,B,C,g,g,g).
:- mode_on_success umnl_chk(A,B).
:- mode_on_success unifies_mnl(A,B).
:- mode_on_success 'well, add some more'(A,B).
